// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface ValidateTokenRequestDto {
  token: string;
}

export interface DecodedUserResponseDto {
  userId: string;
  email: string;
}

export interface ValidateTokenResponseDto {
  user?: DecodedUserResponseDto | undefined;
  empty?: Empty | undefined;
}

export interface Empty {
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  validateUserToken(request: ValidateTokenRequestDto): Observable<ValidateTokenResponseDto>;
}

export interface AuthServiceController {
  validateUserToken(
    request: ValidateTokenRequestDto,
  ): Promise<ValidateTokenResponseDto> | Observable<ValidateTokenResponseDto> | ValidateTokenResponseDto;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["validateUserToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
